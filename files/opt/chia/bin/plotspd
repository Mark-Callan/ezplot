#!/usr/bin/env python3
from os.path import exists
from plumbum import local as sh
import yaml
from multiprocessing import Pool

from os import environ

HOME = environ["HOME"]
CONFIG_FILE = f"{HOME}/.chia/mainnet/config/config.yaml"

def load_config():
    with open(CONFIG_FILE, 'r') as fd:
        return yaml.safe_load(fd)

PLOT_PATHS = load_config()['harvester']['plot_directories']

def find_plots(search="*.plot"):
    all_plots = []
    for path in PLOT_PATHS:
        if exists(path):
            result = sh['sudo']['find'][path]['-type']['f']['-name'][search]().strip()
            plots = result.split('\n')
            if len(plots) > 0:
                all_plots.extend(plots)
    return list(filter(lambda p: len(p.strip()) > 0, all_plots))

def get_plot_completed_date(path):
    lscmd = sh['ls']['-l']['--time-style=long-iso'][path]
    awkcmd = sh['awk']['{print $6}']
    return ((lscmd | awkcmd)().strip(), path,)

def get_distinct_plot_dates(paths):
    file_names = [p.split('/')[-1:] for p in paths]
    date_list = [p.split('-')[2:5] for p in paths]
    distinct_dates = []
    for date in date_list:
        if date not in distinct_dates:
            distinct_dates.append(date)
    return distinct_dates

def get_plots_from_date(date):
    date_str = '-'.join(date)
    plots = find_plots(search=f"*{date_str}*.plot")
    return (date_str, len(plots),)

def main():
    all_plots = find_plots()
    if len(all_plots) == 0:
        print("Not plots found.")
        exit(0)
    else:
        print(f"Found {len(all_plots)} plots total.")

    pool = Pool(32)
    completed_dates = pool.map(get_plot_completed_date, all_plots)
    dates = { }
    for date, path in completed_dates:
        if date not in dates:
            dates[date] = []
        dates[date].append(path)
    keys = [k for k in dates]
    keys.sort()
    print("| date       | plots generated ")
    for k in keys:
        print(f"| {k} | {len(dates[k])} ")

    # dates = get_distinct_plot_dates(all_plots)
    # total_plots = len(all_plots)
    # pool = Pool(len(dates))
    # results = pool.map(get_plots_from_date, dates)
    # results.sort()
    # print("| date       | plots generated ")
    # for result in results:
    #     print(f"| {result[0]} | {result[1]} ")
    print(f' - total: {len(all_plots)}')
    print(f' - avg:   {len(all_plots)/len(keys)} plots/day')


if __name__ == "__main__":
    main()
