#!/usr/bin/env python3

import pathlib
from sys import argv
from plumbum import local as sh

# This script should be in "${CHIA_HOME}/bin"
CHIA_HOME = pathlib.Path(__file__).parent.parent.absolute()

actions = {
    "start": sh[f"{CHIA_HOME}/bin/startplot"],
    "stop": sh[f"{CHIA_HOME}/bin/stopplot"],
    "iops": sh[f"{CHIA_HOME}/bin/iops"],
    "io": sh[f"{CHIA_HOME}/bin/monitorio"],
    "plotspace": sh[f"{CHIA_HOME}/bin/plotspace"],
    "plotdst": sh[f"{CHIA_HOME}/bin/plotdst"],
    "plot": sh[f"{CHIA_HOME}/bin/plot"],
    "chia": sh[f"{CHIA_HOME}/bin/chia"],
    "chia-gui": sh[f"{CHIA_HOME}/bin/chia"],
    "logs": sh[f"{CHIA_HOME}/bin/tmlogs"],
    "env": (sh['env'] | sh['grep']['CHIA_']),
    "monitor": sh[f"{CHIA_HOME}/bin/monitorplots"],
    "sync": sh[f"{CHIA_HOME}/bin/syncplots"],
    "uploadplots": sh[f"{CHIA_HOME}/bin/uploadplots"],
    "rebalance": sh[f"{CHIA_HOME}/bin/rebalance"],
    "duplicates": sh[f"{CHIA_HOME}/bin/duplicates"]
}

descriptions = {
    "start": "Start plotters, remote sync, io monitor and plot count mounter.",
    "stop": "Stops plotters",
    "iops": "Shows combined io stats for all drives. -h for human output.",
    "io": "Starts the io monitor",
    "plotspace": "Lists mount points and their available drive space sorted in ascending order.",
    "plotdst": "Selects the best plot destination directory based on available space.",
    "plot": "Starts a plotter using the given tmp dir, and using plotdst to get the destination.",
    "chia": "Wrapper for chia-blockchain that automatically retrieves and sets up the virtual environment.",
    "chia-gui": "Sets up and launches the chia-gui",
    "logs": "Gets the last n lines of logs for each of the tmux sessions.",
    "env": "Prints the CHIA related environment variables.",
    "monitor": "Starts the plot count monitor.",
    "sync": "Syncs the locally generated plots to the configured remote location.",
    "uploadplots": "Used by sync",
    "rebalance": "Starts a rebalancer that continuously moves plots if the difference in balance between drives exceeds N percent.",
    "duplicates": "Lists plots that have duplicate files."
}

def main():
    if len(argv) == 1:
        print("\nsyntax:\n\tezplot <action> [args]")
        print("\navailable actions:\n")
        placeholder = "          "
        for action in actions.keys():
            padded = action + placeholder[:-len(action)]
            print(f"  {padded}  {descriptions[action]}\n")
        exit()

    command = actions[argv[1]]
    if len(argv) > 2:
        for arg in argv[2:]:
            command = command[arg]
    from plumbum import FG
    command & FG

if __name__ == '__main__':
    main()
